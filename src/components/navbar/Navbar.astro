---
import HeaderLink from "../HeaderLink.astro";
import { SITE_TITLE } from "../../consts";
import Logo from "../ui/Logo.astro";
---

<header>
  <nav>
    <HeaderLink href="/" data-href="/">
      <span class="sr-only">
        {SITE_TITLE}
      </span>
      <div
        class="anim--home"
        data-lottie-data={JSON.stringify({
          id: "home",
          src: "/assets/animations/home.json",
          autoplay: false,
          loop: false,
        })}
      >
      </div>
    </HeaderLink>
    <div class="header__logo">
      <a href="/" data-href="/">
        <span class="hidden"> logo</span>
        <Logo />
      </a>
    </div>
    <div class="internal-links">
      <HeaderLink href="/about">
        <span class="hidden"> info</span>
        <div class="f">
          <div
            class="anim--info"
            data-lottie-data={JSON.stringify({
              id: "info",
              src: "/assets/animations/info.json",
              autoplay: false,
              loop: false,
            })}
          >
          </div>
        </div>
      </HeaderLink>
    </div>
  </nav>
</header>

<style>
  .anim--home {
    width: 198px;
    position: absolute;
    top: -13px;
    left: -14px;

    @media (min-width: 45rem) {
      width: 143px;
      top: -5px;
      right: -14px;
    }
  }

  .anim--info {
    width: 3.6em;
    position: absolute;
    top: -0.3125rem;
    right: 0.3125rem;
    @media (min-width: 45rem) {
      width: 2.5625rem;
      top: 0.0625rem;
      right: 0.5625rem;
    }
  }
</style>

<script>
  import Lottie, { type AnimationItem } from "lottie-web";

  interface AnimationFrames {
    mouseEnter: any;
    click: any;
    mouseLeave: any;
  }

  const animations: Record<string, AnimationFrames> = {
    info: {
      mouseEnter: [0, 29],
      click: [60, 86],
      mouseLeave: [30, 59],
    },
    home: {
      mouseEnter: [0, 29],
      click: [
        [60, 86],
        [30, 59],
      ],
      mouseLeave: [30, 59],
    },
    logo_icon: {
      mouseEnter: [0, 29],
      click: [
        [60, 86],
      ],
      mouseLeave: [30, 59],
    },
  };

  type AnimationId = keyof typeof animations;
  type AnimationItemWithWrapper = AnimationItem & { wrapper: HTMLDivElement };

  const setupLottieAnimations = (
    animation: AnimationItemWithWrapper,
    frames: AnimationFrames
  ) => {
    if (animation) {
      let clicked = false;

      animation.wrapper.addEventListener("mouseenter", () => {
        animation.playSegments(frames.mouseEnter, true);
      });

      animation.wrapper.addEventListener("click", () => {
        animation.playSegments(frames.click, true);

        clicked = true;
      });

      animation.wrapper.addEventListener("mouseleave", () => {
        if (!clicked) {
        animation.playSegments(frames.mouseLeave, true);
        }
        clicked = false;
      });
    }
  };

  (Object.keys(animations) as AnimationId[]).forEach(
    (animationId: AnimationId) => {
      const elements = document.querySelectorAll(`.anim--${animationId}`)!;
      elements.forEach((element) => {
        const infoConfig = JSON.parse(
          element?.getAttribute("data-lottie-data")!
        );
        const frames = animations[animationId];

        const animation = Lottie.loadAnimation({
          container: element, // the dom element that will contain the animation
          renderer: "svg",
          loop: infoConfig.loop ?? false,
          autoplay: infoConfig.loop ?? false,
          path: infoConfig.src, // the path to the animation json
          rendererSettings: {
            viewBoxOnly: true,
          },
        }) as AnimationItemWithWrapper;
        setupLottieAnimations(animation, frames);
      });
    }
  );
</script>
